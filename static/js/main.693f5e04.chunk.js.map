{"version":3,"sources":["StateProvider.js","reducer.js","components/Search.js","pages/Home.js","useGoogleSearch.js","keys.js","components/SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","term","Search","hideButtons","dispatch","useState","input","setInput","history","useHistory","search","e","preventDefault","push","className","onChange","target","Button","onClick","variant","Home","src","alt","useGoogleSearch","data","setData","useEffect","a","fetch","then","response","json","result","fetchData","SearchPage","to","searchInformation","formattedTotalResults","formattedSearchTime","items","map","item","href","link","displayLink","title","snippet","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.693f5e04.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\n//preparing the data layer\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\n// Hook which allows us to pull infomation from the data layer\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export const initialState = {\r\n  term: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n  SET_SEARCH_TERM: \"SET_SEARCH_TERM\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n\r\n  switch (action.type) {\r\n    case actionTypes.SET_SEARCH_TERM:\r\n      return {\r\n        ...state,\r\n        term: action.term,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useState } from \"react\";\r\nimport \"./Search.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport { actionTypes } from \"../reducer\";\r\n\r\nfunction Search({ hideButtons = false }) {\r\n  const [{}, dispatch] = useStateValue();\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const search = (e) => {\r\n    e.preventDefault();\r\n    console.log(input);\r\n    dispatch({\r\n      type: actionTypes.SET_SEARCH_TERM,\r\n      term: input,\r\n    });\r\n    history.push(\"/search\");\r\n  };\r\n  return (\r\n    <form className=\"search\">\r\n      <div className=\"search__input\">\r\n        <SearchIcon className=\"search__inputIcon\" />\r\n        <input value={input} onChange={(e) => setInput(e.target.value)} />\r\n      </div>\r\n\r\n      {!hideButtons ? (\r\n        <div className=\"search__buttons\">\r\n          <Button className=\"searchBtn\" type=\"submit\" onClick={search} variant=\"outlined\">\r\n            Let's Search\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"search__buttons\">\r\n          <Button\r\n            className=\"search__buttonsHidden\"\r\n            type=\"submit\"\r\n            onClick={search}\r\n            variant=\"outlined\"\r\n          >\r\n            Let's Search\r\n          </Button>\r\n\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Home.css\";\r\nimport AppsIcon from \"@material-ui/icons/Apps\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport Search from \"../components/Search\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home\">\r\n      <div className=\"home__header\">\r\n      </div>\r\n      <div className=\"home__body\">\r\n        <img\r\n          src=\"https://i.ibb.co/nn9z2nH/pngegg.png\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"home__inputContainer\">\r\n          <Search />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { useEffect, useState } from \"react\";\r\nimport API_KEY from \"./keys\";\r\n\r\nconst CONTEXT_KEY = \"1c1cb70420f03c945\";\r\n\r\nconst useGoogleSearch = (term) => {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      fetch(\r\n        `https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CONTEXT_KEY}&q=${term}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n          setData(result);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [term]);\r\n\r\n  return { data };\r\n};\r\n\r\nexport default useGoogleSearch;\r\n","export const API_KEY = \"AIzaSyDbbPa91qSdY45vCYckAqsIHCbyTAZ_1m0\";\r\n\r\nexport default API_KEY;\r\n","import React from \"react\";\r\nimport { useStateValue } from \"../StateProvider\";\r\nimport useGoogleSearch from \"../useGoogleSearch\";\r\nimport \"./SearchPage.css\";\r\nimport Response from \"../response\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Search from \"../components/Search\";\r\n\r\nfunction SearchPage() {\r\n  const [{ term }, dispatch] = useStateValue();\r\n\r\n  // Mock API CALL\r\n  // const data = Response;\r\n\r\n  // LIVE API CALL\r\n  const { data } = useGoogleSearch(term);\r\n\r\n  // https://developers.google.com/custom-search/v1/using_rest\r\n  // https://cse.google.com/cse/create/new\r\n\r\n  return (\r\n    <div className=\"searchPage\">\r\n      <div className=\"searchPage__header\">\r\n        <Link to=\"/\">\r\n          <img\r\n            className=\"searchPage__logo\"\r\n            src=\"https://i.ibb.co/nn9z2nH/pngegg.png\"\r\n            alt=\"\"\r\n          />\r\n        </Link>\r\n        <div className=\"searchPage__headerBody\">\r\n          <Search hideButtons />\r\n          <div className=\"searchPage__options\">\r\n            <div className=\"searchPage__optionsLeft\">\r\n            </div>\r\n            <div className=\"searchPage__optionsRight\">\r\n              <div className=\"searchPage__option\">\r\n              </div>\r\n              <div className=\"searchPage__option\">\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {term && (\r\n        <div className=\"searchPage__results\">\r\n          <p className=\"searchPage__resultCount\">\r\n            About {data?.searchInformation.formattedTotalResults} results (\r\n            {data?.searchInformation.formattedSearchTime} seconds) for {term}\r\n          </p>\r\n\r\n          {data?.items.map((item) => (\r\n            <div className=\"searchPage__result\">\r\n              <a className=\"searchPage__resultLink\" href={item.link}>\r\n\r\n                {item.displayLink}\r\n              </a>\r\n              <a className=\"searchPage__resultTitle\" href={item.link}>\r\n                <h2>{item.title}</h2>\r\n              </a>\r\n              <p className=\"searchPage__resultSnippet\">{item.snippet}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchPage;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Home from \"./pages/Home\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport SearchPage from \"./components/SearchPage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/search\">\r\n            <SearchPage />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { StateProvider } from \"./StateProvider\";\r\nimport reducer, { initialState } from \"./reducer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}